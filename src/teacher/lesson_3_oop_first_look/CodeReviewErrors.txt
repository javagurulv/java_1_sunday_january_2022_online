
WARNING: не нужные комменты в коде

    //constructor without parameters and body
    public Robot(){
    }

Комменты хороши для вас во время учёбы, но в реальном коде
такие "бесполезные" комменты лучше не оставлять.

-----------------------------------------------------------

WARNING: используйте один и тот же стиль форматирования кода
во всех местах.

Robot robot=new Robot();
Robot robot1 = new Robot();

Для читаемости кода лучше знак = окружать пробелами с обеих сторон,
как это сделано во второй строке.

-----------------------------------------------------------

WARNING: не добавляйте и не оставляйте лишние import команды в коде.

import java.sql.SQLOutput;  - что это за класс? Вы его точно используете в коде?
import java.util.Scanner;

Не используемые (лишние) в коде import команды в среде разработки
подсвечиваются серым цветом, их можно смело удалять из кода. Import
команды показывают какие сторонние классы вы используете в своём коде.

-----------------------------------------------------------

WARNING: плохо читаемый код! Без пробелов вся строка сливается
в единое целое и человеку нужно потратить время (пусть и долю секунды)
чтобы разобрать смысл написанного кода.

programmingLanguage==programmingLanguage2

Для читаемости кода лучше знак == окружать пробелами с обеих сторон.

Продуктивность программиста очень сильно зависит от той нагрузки,
с которой он сталкивается при чтении кода. Если код написан плохо,
отформатирован плохо, то программисту читающему ваш код придётся
дополнительно напрягаться, чтобы разобрать смысл. Лишнее напряжение
в одном месте, потом в другом, потом в третьем приводит к быстрой
потере эффективности. Программист это человек, а у человека ресурс
головного мозга и энергии в день очень сильно ограничен. Если
человеку придётся тратить больше времени на прочтение и понимание
вашего кода, то у него останется меньше ресурсов для полезной
деятельности (написания нового кода). Всегда помните, что на
месте читающего код можете оказаться вы сами через месяц или пол года!
Не подставляйте самих себя плохим качеством написанного кода.

-----------------------------------------------------------

WARNING: не объявляйте несколько классов в одном файле
(субъективное мнение).

public class Book {

}

class BookDemo {

}

Да, объявление нескольких классов в одном файле допускается
правилами языка программирования. Но на мой взгляд так лучше
не делать, особенно если мы планируем в будущем писать большие
и серьезные задачи. И вот почему. Класс - это контейнер, в который
мы можем поместить какую то часть функциональности программы. Обычно
мы выделяем часть функциональности тесно связанной друг с другом,
и оформляем (упаковываем) ее в отдельный класс. Тем самым мы
физически отделяем эту часть функциональности от всего остального.
Изолируем ее. И класс (и отдельный файл в котором он лежит) классно
подходят для этой задачи. Помещая несколько классов в один файл
мы, пускай и чуть-чуть, но нарушаем принцип изоляции.
Помещение нескольких классов в один файл имеет смысл на уровне
архитектуры приложения, когда мы хотим сгруппировать в одном месте
несколько реализаций одного и того же интерфейса или класса и не
показывать их за пределы самого файла (если объявить классы как
private, то они будут не доступны даже внутри других классов
этого же пакета).

-----------------------------------------------------------

WARNING: ставьте дополнительные скобки, показывающие
приоритет выполнения операций.

if (number % 2 == 0)


Лучше: if ((number % 2) == 0)

Если в одной строке записано выражение состоящее из нескольких
операций, то добавляйте дополнительные скобки, которые покажут
в каком порядке должны выполняться операции. Да, в языке
программирования Java есть понятие приоритета операций.
Но вы о нём помните? Вы уверены на 100%, что операции
в строке будут выполняться именно в том порядке, в котором нужно?
Не заставляйте человека читающего ваш код дополнительно
напрягать свой мозг вспоминая приоритет операций и порядок
их выполнения. Просто расставьте дополнительные скобки!

